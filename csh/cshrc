#!/bin/tcsh

# ############################################################
# Basic shell settings
# ############################################################
setenv PATH "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/usr/ccs/bin:/usr/ucb"
setenv LD_LIBRARY_PATH "/usr/local/lib:/usr/lib64:/usr/lib:/lib"
setenv MANPATH "/usr/local/man:/usr/man:/usr/share/man"

# Don't overwrite existing files with the redirection character ">"
set noclobber

# Check to see if this is an interactive shell. If not, skip the rest of this
# file. Good for running shell commands in Emacs or scp.
if ($?USER == 0 || $?prompt == 0) exit

setenv EXINIT   `set ai|set shiftwidth=3|set ic`
setenv EDITOR   "vim"
setenv LS_COLORS di="1;36":ln="1;35":ex="1;33":"*.ev=1;34":"*.cxx=1;34":"*.cpp=1;32":"*.c=1;32":"*.h=1;32":"*.vc=1;33":"*.txt=1;32":"*.tar=1;31":"*.gz=1;31":"*.bz2=1;31":"*.pdf=1;32"
setenv SHELL tcsh

set autolist = ambiguous

# Notify me when the status of background jobs change
set notify

# Save the most recent 40 events when I log out
set savehist = 2000

# Remember my 40 most recent events
set history = 2000

# Substitute the filename to be completed when I type an <ESC> at
# the command line
set filec

# Tells the shell to ignore .o files when trying to complete filenames
# when filec is set.  (This doesn't hold if the .o file is the only
# on that could be completed.
set fignore=.o

# Tells "filec" not to cry if it can't complete a file.
set nobeep

# Don't let me log out by pressing <ctrl-d>
# set ignoreeof

# Set TTY shell variable equal to the current terminal name
set TTY=`who am i | awk '{print $2}'`

set symlinks=ignore
set rmstar
set cdpath = ( $HOME )

if ( $?EMACS ) then
    set prompt = "%S%m%s: %~ > "
    unsetenv LS_COLORS
else
    set prompt = "%{[0;32m%}%S%m%s%{[0m%}: %~ > "
endif

limit coredumpsize unlimited
unlimit core

if ($?tcsh && $?prompt) then
   bindkey "\e[1~" beginning-of-line # Home
   bindkey "\e[7~" beginning-of-line # Home rxvt
   bindkey "\e[2~" overwrite-mode    # Ins
   bindkey "\e[3~" delete-char       # Delete
   bindkey "\e[4~" end-of-line       # End
   bindkey "\e[8~" end-of-line       # End rxvt
endif

# --------------------------------------------------
# Common aliases independent to platforms.
# --------------------------------------------------
alias ls         'ls --color=always'
alias cls        'clear'
alias ll         'ls -ls | more'
alias lt         'ls -lt | more'
alias la         'ls -al | more'
alias num        'ls | wc -l'
# alias cwdcmd     'echo -n "^[]2;${HOST}:$cwd^G^[]1;${HOST}^G" '
alias used       'du -sh'
alias myps       'ps -aux | grep ${USER}'
alias rm         'rm -i'
alias gr         'grep -n'
alias cgrep      "find . -type f -iregex '.*\.\(c\|C\|cc\|h\|ht\|hh\|cxx\|cpp\)' -print0 | xargs -0 grep --color -n"
alias hgrep      "find . -type f -iregex '.*\.\(h\|ht\|hh\)' -print0 | xargs -0 grep --color -n"
alias mgrep      "find . -regextype posix-egrep -iregex '(.*\/Makefile|.*\/Makefile\..*|.*\.make|.*\.hier|.*\.mak|.*\.mk)' -type f -p\
rint0 | xargs -0 grep --color -n"
alias sgrep      "find . -type f -iregex '.*\.\(c\|C\|h\|cpp\|S\|java\|xml\|sh\|hier\|make\)' -print0 | xargs -0 grep --color -n"
alias du1        "du -h -d 1"
alias rmcore     'find . -name "core.*" -print0 | xargs -0 \rm -rf'

# ##################################################
# Default project
# ##################################################
if ( $?PROJECT == 0 ) then
   setenv DEFAULT_PROJECT default
   setenv PROJECT $DEFAULT_PROJECT
endif
setenv EDITOR 'emacsclient -s $PROJECT -t -a ""'

# ##################################################
# Use libSegFault.so to catch uncatched signals.
# ##################################################
# Usage: catchsegv -h
#
#  /usr/bin/catchsegv program args
#
setenv LIB /lib64
setenv SEGFAULT_SIGNALS all

# ############################################################
# source internal settings
# ############################################################
set internal_cshrc="~/.cshrc.internal"
if ( -e $internal_cshrc ) then
  source $internal_cshrc
  echo "Loaded internal settings from ${internal_cshrc}"
endif
unset internal_cshrc

# ######################################################################
# Create project workspaces
#  PROJECT_LIST_0
#  PROJECT_LIST_1
# ######################################################################
setenv TERM xterm
#set WM=tmux
set WM=screen
source ~/Settings/csh/${WM}.cshrc
unset WM
# how to remove an element from PATH
# echo $PATH | sed -e 's;\(^/home/user/bin:\|:/home/user/bin$\|:/home/user/bin\(:\)\);\2;g'

# ######################################################################
# Common Aliases
# ######################################################################
alias et         "$EDITOR"
# alias kill-emacs      "emacsclient --eval '(kill-emacs)' -t -s"
alias kill-emacs       "emacsclient --eval '(kill-emacs)' -t -s ${PROJECT}"
alias kill-emacs-p     "emacsclient --eval '(kill-emacs)' -t -s \!*"
alias force-kill-emacs kill -9 `pgrep -f "emacs \-\-daemon=$PROJECT"`
alias list-emacs       ps -fp `pgrep -f "emacs \-\-daemon=$PROJECT"`
alias list-all-emacs   ps -fp `pgrep -f "emacs \-\-daemon="`
alias list-projects    'tmux list-sessions -F "[#S:#{session_id}]: #{session_windows} windows (created #{session_created_string}) [#{session_width}x#{session_height}) (#{?session_attached,attached,detached})"'
alias gdb              "gdb --data-directory=$HOME/tools/gdb/share/gdb"
#alias ls-by-size       `/bin/ls -lhS | awk '{printf "%5s  %s\n", $5, $9}'`
alias valgrind     "valgrind --log-file=valgrind_report.log --leak-check=full --show-reachable=yes"

alias my-shelve          "p4 changes -s shelved -u $USER -c ${USER}_starrc_${PROJECT}"
alias my-shelve-for-this "p4 changes -s shelved -u $USER -c ${USER}_starrc_${PROJECT}"
