# -*- mode:shell-script -*-

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=no

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    # alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# ##################################################
# Basic GIT settings
# ##################################################
export LESSCHARSET=utf-8
if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi

export SHELL=/bin/bash
export TERM=xterm-256color
# export LC_CTYPE="zh_TW.utf8"
export SCREENRC=$HOME/Settings/screen/screenrc
export PATH="$HOME/local/bin:$HOME/bin:$HOME/Dropbox/bin:$PATH"

###################################################################
# Project list. Every project will be given a workspace command.  #
###################################################################
PROJECT_LIST="bozaalarm tallycounter"

# ##################################################
# platform-dependent settings
# ##################################################
CREATE_DVTM_SESSIONS=1
MNAME=`uname -s | tr '[:upper:]' '[:lower:]'`
case "$MNAME" in
cygwin*)
    MBASHRC=$HOME/Settings/bash/bashrc.cygwin
    CREATE_DVTM_SESSIONS=0
    MNAME=cygwin
    ;;
darwin*)
    MBASHRC=$HOME/Settings/bash/bashrc.darwin
    MNAME=darwin
    ;;
linux*)
    MBASHRC=$HOME/Settings/bash/bashrc.linux
    MNAME=linux
    ;;
*)
    ;;
esac
if [ -f $MBASHRC ]; then
    echo "Load platform-dependent $MBASHRC"
    . $MBASHRC
fi

#######################################################
# Check settings that should be set for all platforms #
#######################################################

# ###############################################
# common aliases
# ###############################################
if [ -f ~/.bash_aliases ]; then
   . ~/.bash_aliases
fi

alias ll='ls --color=always -l'
alias la='ls -A'
alias l='ls -CF'
alias gr='grep -n'
alias cls='clear'
alias scp='scp -Cr'

# ##################################################
# Workspace
# ##################################################
DEFAULT_WORKSPACE=default
if [ -z $WORKSPACE ]; then
    export WORKSPACE=$DEFAULT_WORKSPACE
fi

# Don't create ws aliases if already in some WORKSPACE
if [ -z $WINDOW ]; then
    for w in $PROJECT_LIST $DEFAULT_WORKSPACE
    do
        alias ws_$w="create_workspace $w"
    done
fi
export EDITOR="emacsclient -s $WORKSPACE -t -a ''"
alias et="$EDITOR"
alias kill-emacs="emacsclient -s $WORKSPACE -t --eval '(kill-emacs)'"
# in case (MacOS and Cygwin), emacs server can't be started by this way.
alias start-emacs-server="emacs --daemon=$WORKSPACE"

# create dvtm sessions
if [ $CREATE_DVTM_SESSIONS -eq 1 ]; then
    DTACH=`which dtach`
    DVTM=`which dvtm`
    if [ -nz $DTACH ] && [ -nz $DVTM ]; then
        echo "Created aliases for dvtm sessions... use dvtm[1-5] to create"
        if [ -z $WINDOW ]; then
            for s in {1..5}
            do
                alias dvtm$s="dtach -A /tmp/dvtm-session-${WORKSPACE}-$s dvtm"
            done
        else
            alias dvtm="dtach -A /tmp/dvtm-session-${WORKSPACE}-${WINDOW} dvtm"
        fi
    else
        echo "Either dtach or dvtm is not installed. no dvtm sessions will be created for you."
    fi
fi
CREATE_DVTM_SESSIONS=

alias cgrep="find . -type f -iregex '.*\.\(c\|C\|h\|ht\|cpp\)' -print0 | xargs -0 grep --color -n"
alias hgrep="find . -type f -iregex '.*\.\(h\|ht\)' -print0 | xargs -0 grep --color -n"
alias mgrep="find . -regextype posix-egrep -iregex '(.*\/Makefile|.*\/Makefile\..*|.*\.make|.*\.mak|.*\.mk)' -type f -print0 | xargs -0 grep --color -n"
alias sgrep="find . -type f -iregex '.*\.\(c\|C\|h\|cpp\|S\|java\|xml\|sh\|hier\|make\)' -print0 | xargs -0 grep --color -n"
alias jgrep="find . -type f -iregex '.*\.\(java\)' -print0 | xargs -0 grep --color -n"

# ###########################################################
# Functions that are common to all platforms.
# ###########################################################

# Converts flac files to alac files
flac2alac () {
    for f in *.flac; do ffmpeg -i "$f" -acodec alac "${f%.flac}.m4a"; done
}

# Convert alac to flac files
alac2flac () {
    for f in *.m4a; do ffmpeg -i "$f" -acodec flac "${f%.m4a}.flac"; done
}

# Convert flac to mp3
flac2mp3 () {
    for f in *.flac; do ffmpeg -i "$f" -ab 320k -ac 2 -ar 48000 "${f%.flac}.mp3"; done
}

capitalize_word () {
    local C=`echo -n "${1:0:1}" | tr '[:lower:]' '[:upper:]'`
    local result="${C}${1:1}"
    echo $result
}

# Mount development image
mount_dev_image () {
    # Execute platform-specific mount function. It can be just a change dir
    # function or empty function.
    mount_dev_image_$MNAME $1
}

# Create a screen workspace with $1 as its name
create_workspace () {
    export WORKSPACE=$1
    mount_dev_image $1
    echo "Create workspace for ${WORKSPACE} development..."
    screen -mS $1 -DR
}
