;; -*- mode: Lisp;-*-

;; have packages installed by Homwbrew

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(let ((default-directory "/usr/local/share/emacs/site-lisp/"))
    (normal-top-level-add-subdirs-to-load-path))

(setq ispell-program-name "/usr/local/bin/aspell")

;; When running Aquamacs, initialize color-theme
(when (featurep 'aquamacs)
  (color-theme-initialize))

;; Feature control
(setq use-org-mode nil
      use-git-mode nil
      use-cedet nil                       ;for android/java
      use-jdee nil
      use-tabbar nil
      use-helm nil
      use-ws-butler t                 ; remove whitespaces
      use-ecb nil)

(load-file (expand-file-name "~/Settings/Emacs/emacs.el"))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("1160f5fc215738551fce39a67b2bcf312ed07ef3568d15d53c87baa4fd1f4d4e" "a1289424bbc0e9f9877aa2c9a03c7dfd2835ea51d8781a0bf9e2415101f70a7e" "51e228ffd6c4fff9b5168b31d5927c27734e82ec61f414970fc6bcce23bc140d" "1db337246ebc9c083be0d728f8d20913a0f46edc0a00277746ba411c149d7fe5" "f9574c9ede3f64d57b3aa9b9cef621d54e2e503f4d75d8613cbcc4ca1c962c21" "427fed191e7a766152e59ef0e2904283f436dbbe259b9ccc04989f3acde50a55" "7356632cebc6a11a87bc5fcffaa49bae528026a78637acd03cae57c091afd9b9" "04dd0236a367865e591927a3810f178e8d33c372ad5bfef48b5ce90d4b476481" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "45712b65018922c9173439d9b1b193cb406f725f14d02c8c33e0d2cdad844613" "b0266ff95532a85b3d1288ed65c1570905b8e9957b233ed1395f2dbf4486df79" "cc60d17db31a53adf93ec6fad5a9cfff6e177664994a52346f81f62840fe8e23" "2dd32048690787844d8cba601ed3dd8b2f419e9bd985898d0c3792671a05b96b" "ea489f6710a3da0738e7dbdfc124df06a4e3ae82f191ce66c2af3e0a15e99b90" "3f78849e36a0a457ad71c1bda01001e3e197fe1837cb6eaa829eb37f0a4bdad5" "74d9d61cb5280832ed33110cf83b8a1cb83bec5c18509cdbfb0ba94c41e34b71" "cc0dbb53a10215b696d391a90de635ba1699072745bf653b53774706999208e3" "9122dfb203945f6e84b0de66d11a97de6c9edf28b3b5db772472e4beccc6b3c5" default)))
 '(package-selected-packages
   (quote
    (google-c-style multi-compile ample-zen-theme org vlf java-snippets yatemplate ws-butler smartparens p4 magit log4j-mode jbeans-theme hideshowvis helm-proc helm-package helm-make helm-ls-git helm-gtags helm-git-files helm-git gitty ggtags fsm company))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "#cccccc" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 130 :width normal :foundry "nil" :family "Ubuntu Mono")))))

;; ----------------------------------------------------------------------
;; Set English/Chinese font.
;; ----------------------------------------------------------------------
(when window-system
  (progn
    (setq ns-antialias-text t)
    (set-frame-font "Ubuntu Mono-13" nil t)
    ;; (set-default-font "-apple-Monaco-medium-r-normal--13-*-*-*-*-*-*-*")
    ;; (set-default-font "-apple-PT_Mono-medium-r-normal--14-*-*-*-*-*-*-*")
    ;; (set-default-font "-apple-Source_Code_Pro-medium-r-normal--14-*-*-*-*-*-*-*")
    ;; (set-default-font "-apple-Consolas-medium-normal-normal-*-15-*-*-*-m-0-iso10646-1")

    ;; Set chinese font.
    (if ns-antialias-text
        ;; (set-fontset-font (frame-parameter nil 'font)
        ;;                   'han '("MingLan" . "unicode-bmp"))
        (set-fontset-font (frame-parameter nil 'font)
                          'han '("Noto Sans T Chinese" . "unicode-bmp"))
      (set-fontset-font (frame-parameter nil 'font)
                        'han '("AR PL UMing TW" . "unicode-bmp")))
    ))

;; (setq shift-select-mode t
;;       line-move-visual t
;;       locate-command 'mdfind)

;; (remove-hook 'before-save-hook 'delete-trailing-whitespace)

;; --------------------------------------------------
;; Different things between Aquamacs & Emacs
;; --------------------------------------------------
;; Override the [home] & [end] bindings
(if (featurep 'aquamacs)
  (progn
    (define-key osx-key-mode-map (kbd "<home>") 'beginning-of-line)
    (define-key osx-key-mode-map (kbd "<end>") 'end-of-line)
    )
  (progn
    (global-set-key [home] 'beginning-of-line)
    (global-set-key [end] 'end-of-line)
    ))

(when (featurep 'aquamacs)
    (progn
      ;;
      (setq custom-file "~/.emacs")
      (tabbar-mode 0)

      ;; Use the same font for all modes
      (aquamacs-autoface-mode nil)

      ;; restore classic Emacs selection behavior
      (transient-mark-mode 1)

      ;; Open buffers in the same frame
      (one-buffer-one-frame-mode 0)

      ;; Use 'open' command in Dired mode
      (defun dired-open-mac ()
        (interactive)
        (let ((file-name (dired-get-file-for-visit)))
          (if (file-exists-p file-name)
              (call-process "/usr/bin/open" nil 0 nil file-name))))
      ;; (define-key dired-mode-map "o" 'dired-open-mac)
     ))

(when (file-directory-p "/usr/local/bin")
  (progn
    (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
    (setq exec-path (cons "/usr/local/bin" exec-path))))

;; Customize gud
(setq gdb-many-windows t
      compilation-scroll-output t       ;scroll output automatically
      gud-gdb-command-name "gdb --annotate=3")

;; Customize ant build for Android development
;; (define-key java-mode-map [(f8)] 'my-ant-build-command-g)
;; (defun my-ant-build-command-g ()
;;   (interactive)
;;   (progn
;;     (set (make-local-variable 'compile-command)
;;          "ant -emacs -s build.xml debug"
;;          )
;;     (call-interactively 'compile)       ;give me a chance to make modification to compile-commmand
;;     ;; (compile compile-command t)
;;     ))

;; Load android development library from SDK
;; (add-to-list 'load-path (concat "~/tools/android-sdk-mac_x86/tools/lib"))
;; (require 'android)


;; ----------------------------------------------------------------------
;; multi-compile
;; ----------------------------------------------------------------------
(require 'multi-compile)
(setq multi-compile-alist
      '((c++-mode . (("android-ant-r"     . "ant -emacs -s build.xml release")
                     ;;("gtest_unit_check" "/depot/qsc/QSCM/bin/synmake check" (locate-dominating-file buffer-file-name "gtest_unit"))
                     ("make" "make" (locate-dominating-file buffer-file-name ".git"))
                     ))
        ;; Other modes
        ))
(setq multi-compile-completion-system 'ido)
(define-key c++-mode-map [(f8)] 'multi-compile-run)
;; (define-key c++-mode-map [(f9)] 'my-synmake-compile-command)

;; ----------------------------------------------------------------------
;; My Programming Style
;; ----------------------------------------------------------------------
(defun my-c-mode-hook ()
  (c-set-style "java"))
(add-hook 'c++-mode-hook 'my-c-mode-hook)
(add-hook 'c-mode-hook 'my-c-mode-hook)

(define-key c++-mode-map [(f8)] 'my-synmake-compile-command)
(define-key c++-mode-map [(f9)] 'my-synmake-g-compile-command)

(require 'mouse)
(xterm-mouse-mode t)
(defun track-mouse (e))

;; projects
(and (boundp 'use-cedet) use-cedet
     (progn
       (load "~/Settings/Emacs/project.el")
       )
     )
