;; -*- mode: Lisp;-*-

;; have packages installed by Homwbrew
(let ((default-directory "/usr/local/share/emacs/site-lisp/"))
    (normal-top-level-add-subdirs-to-load-path))

(setq ispell-program-name "/usr/local/bin/aspell")

;; When running Aquamacs, initialize color-theme
(when (featurep 'aquamacs)
  (color-theme-initialize))

;; Feature control
(setq use-org-mode nil
      use-git-mode nil
      use-cedet t                       ;for android/java
      use-jdee nil
      use-tabbar nil
      use-ecb nil)

(load-file (expand-file-name "~/Settings/Emacs/emacs.el"))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("9122dfb203945f6e84b0de66d11a97de6c9edf28b3b5db772472e4beccc6b3c5" default))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; ----------------------------------------------------------------------
;; Set English/Chinese font.
;; ----------------------------------------------------------------------
(when window-system
  (progn
    (setq ns-antialias-text t)
    (set-default-font "-apple-Ubuntu_Mono-medium-normal-normal-*-15-*-*-*-m-0-iso10646-1")
    ;; (set-default-font "-apple-Monaco-medium-r-normal--13-*-*-*-*-*-*-*")
    ;; (set-default-font "-apple-PT_Mono-medium-r-normal--14-*-*-*-*-*-*-*")
    ;; (set-default-font "-apple-Source_Code_Pro-medium-r-normal--14-*-*-*-*-*-*-*")
    ;; (set-default-font "-apple-Consolas-medium-normal-normal-*-15-*-*-*-m-0-iso10646-1")

    ;; Set chinese font.
    (if ns-antialias-text
        ;; (set-fontset-font (frame-parameter nil 'font)
        ;;                   'han '("MingLan" . "unicode-bmp"))
        (set-fontset-font (frame-parameter nil 'font)
                          'han '("Noto Sans T Chinese" . "unicode-bmp"))
      (set-fontset-font (frame-parameter nil 'font)
                        'han '("AR PL UMing TW" . "unicode-bmp")))
    ))

;; (setq shift-select-mode t
;;       line-move-visual t
;;       locate-command 'mdfind)

;; (remove-hook 'before-save-hook 'delete-trailing-whitespace)

;; --------------------------------------------------
;; Different things between Aquamacs & Emacs
;; --------------------------------------------------
;; Override the [home] & [end] bindings
(if (featurep 'aquamacs)
  (progn
    (define-key osx-key-mode-map (kbd "<home>") 'beginning-of-line)
    (define-key osx-key-mode-map (kbd "<end>") 'end-of-line)
    )
  (progn
    (global-set-key [home] 'beginning-of-line)
    (global-set-key [end] 'end-of-line)
    ))

(when (featurep 'aquamacs)
    (progn
      ;;
      (setq custom-file "~/.emacs")
      (tabbar-mode 0)

      ;; Use the same font for all modes
      (aquamacs-autoface-mode nil)

      ;; restore classic Emacs selection behavior
      (transient-mark-mode 1)

      ;; Open buffers in the same frame
      (one-buffer-one-frame-mode 0)

      ;; Use 'open' command in Dired mode
      (defun dired-open-mac ()
        (interactive)
        (let ((file-name (dired-get-file-for-visit)))
          (if (file-exists-p file-name)
              (call-process "/usr/bin/open" nil 0 nil file-name))))
      ;; (define-key dired-mode-map "o" 'dired-open-mac)
     ))

(when (file-directory-p "/usr/local/bin")
  (progn
    (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
    (setq exec-path (cons "/usr/local/bin" exec-path))))

;; Customize gud
(setq gdb-many-windows t
      compilation-scroll-output t       ;scroll output automatically
      gud-gdb-command-name "gdb --annotate=3")

;; Customize ant build for Android development
(define-key java-mode-map [(f8)] 'my-ant-build-command-g)
(defun my-ant-build-command-g ()
  (interactive)
  (progn
    (set (make-local-variable 'compile-command)
         "ant -emacs -s build.xml debug"
         )
    (call-interactively 'compile)       ;give me a chance to make modification to compile-commmand
    ;; (compile compile-command t)
    ))

;; Load android development library from SDK
;; (add-to-list 'load-path (concat "~/tools/android-sdk-mac_x86/tools/lib"))
;; (require 'android)
